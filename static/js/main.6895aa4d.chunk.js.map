{"version":3,"sources":["assets/Doumont_Resume.pdf","redux/text/text.types.js","redux/text/text.reducer.js","redux/screen/screen.types.js","redux/screen/screen.reducer.js","redux/dropdown-menu/dropdown-menu.types.js","redux/dropdown-menu/dropdown-menu.reducer.js","redux/editor-options/editor-options.types.js","redux/editor-options/editor-options.reducer.js","redux/root.reducer.js","redux/store.js","components/editor/editor.component.jsx","redux/text/text.actions.js","components/viewer/viewer.component.jsx","components/folder-container/folder-container.component.jsx","redux/dropdown-menu/dropdown-menu.actions.js","components/editor-viewer-container/editor-viewer-container.component.jsx","components/editor-options-menu/editor-options-menu.component.jsx","redux/editor-options/editor-options.actions.js","components/files-menu/files-menu.component.jsx","redux/screen/screen.actions.js","components/header/header.component.jsx","App.js","index.js"],"names":["module","exports","TextActionTypes","INITIAL_STATE","code","screenActionTypes","windowHeight","window","innerHeight","windowWidth","innerWidth","editorViewerToggle","foldersToggle","dropdownMenuChange","CHANGE_DROPDOWNS","dropdownMenuDropped","dropdownMenuClicked","DROPDOWNS_CLOSED","editorOptionsActionTypes","language","theme","font","fontLigatures","rootReducer","combineReducers","text","state","action","type","payload","screen","dropdownMenu","editorOptions","middleWares","logger","store","createStore","applyMiddleware","Editor","onChange","newValue","e","props","updateText","editor","monaco","this","options","selectOnLineNumbers","fontSize","fontFamily","wordWrap","parameterHints","cycle","width","height","langauge","value","editorDidMount","React","Component","connect","dispatch","Viewer","id","title","src","PdfFile","FolderContainer","className","style","changeDropdowns","dropdown","closeDropdownsOnClick","dynamicWidth","onClick","changeLangauge","changeFont","changeTheme","toggleLigatures","initialOptions","Language","setOptionItems","langaugeOptions","Theme","themeOptions","Font","fontOptions","Latex","JavaScript","Python","vs","VT323","useState","optionItems","Object","keys","map","item","key","toggleFolders","Save","Folders","Profile","toggleEditorViewer","component","onMouseOver","handleResize","useEffect","addEventListener","removeEventListener","render","document","getElementById"],"mappings":"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","file":"static/js/main.6895aa4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Doumont_Resume.95cb8f82.pdf\";","export const TextActionTypes = {\r\n  CHANGE_TEXT: \"CHANGE_TEXT\"\r\n};\r\n","import { TextActionTypes } from \"./text.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  code:\r\n    'import React from \"react\";\\r\\nimport { connect } from \"react-redux\";\\r\\nimport { toggleFolders } from \"../../redux/screen/screen.actions\";\\r\\nimport \"./files-menu.styles.scss\";\\r\\n\\r\\nconst FilesMenu = ({ toggleFolders }) => {\\r\\n  const initialOptions = {\\r\\n    Save: () => {},\\r\\n    Folders: toggleFolders,\\r\\n    Profile: () => {},\\r\\n    \"Other Options\": () => {}\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div className=\"files-menu\">\\r\\n      <div className=\"files-items\">\\r\\n        {Object.keys(initialOptions).map(item => (\\r\\n          <div key={item} className=\"files-item\" onClick={initialOptions[item]}>\\r\\n            {item}\\r\\n          </div>\\r\\n        ))}\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nconst mapDispatchToProps = dispatch => ({\\r\\n  toggleFolders: () => dispatch(toggleFolders())\\r\\n});\\r\\n\\r\\nexport default connect(\\r\\n  null,\\r\\n  mapDispatchToProps\\r\\n)(FilesMenu);\\r\\n'\r\n};\r\n\r\nexport const textReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case TextActionTypes.CHANGE_TEXT:\r\n      return {\r\n        ...state,\r\n        code: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const screenActionTypes = {\r\n  HANDLE_RESIZE: \"HANDLE_RESIZE\",\r\n  TOGGLE_EDITOR_VIEWER: \"TOGGLE_EDITOR_VIEWER\",\r\n  TOGGLE_FOLDERS: \"TOGGLE_FOLDERS\"\r\n};\r\n","import { screenActionTypes } from \"./screen.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  windowHeight: window.innerHeight,\r\n  windowWidth: window.innerWidth,\r\n  editorViewerToggle: \"both\",\r\n  foldersToggle: false\r\n};\r\n\r\nexport const screenReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case screenActionTypes.HANDLE_RESIZE:\r\n      return {\r\n        ...state,\r\n        windowHeight: window.innerHeight,\r\n        windowWidth: window.innerWidth\r\n      };\r\n    case screenActionTypes.TOGGLE_EDITOR_VIEWER:\r\n      if (state.editorViewerToggle === action.payload) {\r\n        return {\r\n          ...state,\r\n          editorViewerToggle: \"both\"\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        editorViewerToggle: action.payload\r\n      };\r\n    case screenActionTypes.TOGGLE_FOLDERS:\r\n      return {\r\n        ...state,\r\n        foldersToggle: !state.foldersToggle\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const dropdownMenuChange = {\r\n  CHANGE_DROPDOWNS: \"CHANGE_DROPDOWNS\"\r\n};\r\n\r\nexport const dropdownMenuDropped = {\r\n  FILES_OPEN: \"FILES_OPEN\",\r\n  EDITOR_OPTIONS_OPEN: \"EDITOR_OPTIONS_OPEN\",\r\n  DROPDOWNS_CLOSED: \"DROPDOWNS_CLOSED\"\r\n};\r\n","import { dropdownMenuChange, dropdownMenuDropped } from \"./dropdown-menu.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  dropdownMenuClicked: dropdownMenuChange.DROPDOWNS_CLOSED\r\n};\r\n\r\nexport const dropdownMenuReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case dropdownMenuChange.CHANGE_DROPDOWNS:\r\n      if (action.payload === state.dropdownMenuClicked) {\r\n        return {\r\n          ...state,\r\n          dropdownMenuClicked: dropdownMenuDropped.DROPDOWNS_CLOSED\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          dropdownMenuClicked: action.payload\r\n        };\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const editorOptionsActionTypes = {\r\n  CHANGE_LANGUAGE: \"CHANGE_LANGAUGE\",\r\n  CHANGE_THEME: \"CHANGE_THEME\",\r\n  CHANGE_FONT: \"CHANGE_FONT\",\r\n  TOGGLE_LIGATURES: \"TOGGLE_LIGATURES\"\r\n};\r\n","/**\r\n * fonts\r\n * \r\n  'Fira Code'\r\n  'Ubuntu Mono'\r\n  'VT323'\r\n  'Nova Mono'\r\n */\r\nimport { editorOptionsActionTypes } from \"./editor-options.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  language: \"python\",\r\n  theme: \"vs-dark\",\r\n  font: \"Fira Code\",\r\n  fontLigatures: true\r\n};\r\n\r\nexport const editorOptionsReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case editorOptionsActionTypes.CHANGE_LANGUAGE:\r\n      return {\r\n        ...state,\r\n        language: action.payload\r\n      };\r\n    case editorOptionsActionTypes.CHANGE_THEME:\r\n      return {\r\n        ...state,\r\n        theme: action.payload\r\n      };\r\n    case editorOptionsActionTypes.CHANGE_FONT:\r\n      return {\r\n        ...state,\r\n        font: action.payload\r\n      };\r\n    case editorOptionsActionTypes.TOGGLE_LIGATURES:\r\n      return {\r\n        ...state,\r\n        fontLigatures: !state.fontLigatures\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { textReducer } from \"./text/text.reducer\";\r\nimport { screenReducer } from \"./screen/screen.reducer\";\r\nimport { dropdownMenuReducer } from \"./dropdown-menu/dropdown-menu.reducer\";\r\nimport { editorOptionsReducer } from \"./editor-options/editor-options.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  text: textReducer,\r\n  screen: screenReducer,\r\n  dropdownMenu: dropdownMenuReducer,\r\n  editorOptions: editorOptionsReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./root.reducer\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst middleWares = [logger];\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middleWares));\r\n","import React from \"react\";\r\nimport MonacoEditor from \"react-monaco-editor\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateText } from \"../../redux/text/text.actions\";\r\n\r\nclass Editor extends React.Component {\r\n  editorDidMount(editor, monaco) {\r\n    /**\r\n     * ! Change monaco editor options here!!!!!!\r\n     */\r\n    //monaco.editor.setTheme(\"vs-dark\");\r\n  }\r\n\r\n  onChange = (newValue, e) => {\r\n    this.props.updateText(newValue);\r\n  };\r\n  render() {\r\n    const code = this.props.code;\r\n    const options = {\r\n      selectOnLineNumbers: true,\r\n      fontSize: 15,\r\n      fontLigatures: this.props.editorOptions.fontLigatures,\r\n      fontFamily: this.props.editorOptions.font,\r\n      wordWrap: \"on\",\r\n      parameterHints: {\r\n        cycle: \"true\"\r\n      }\r\n    };\r\n    return (\r\n      <MonacoEditor\r\n        width={this.props.width}\r\n        height={this.props.height}\r\n        language={this.props.editorOptions.langauge}\r\n        theme={this.props.editorOptions.theme}\r\n        value={code}\r\n        options={options}\r\n        onChange={this.onChange}\r\n        editorDidMount={this.editorDidMount}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  code: state.text.code,\r\n  editorOptions: state.editorOptions\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateText: code => dispatch(updateText(code))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Editor);\r\n","import { TextActionTypes } from \"./text.types\";\r\n\r\nexport const updateText = code => ({\r\n  type: TextActionTypes.CHANGE_TEXT,\r\n  payload: code\r\n});\r\n","import React from \"react\";\r\nimport PdfFile from \"../../assets/Doumont_Resume.pdf\";\r\n\r\nconst Viewer = ({ width, height }) => (\r\n  <iframe id=\"PDF\" title=\"PDF\" width={width} height={height} src={PdfFile} />\r\n);\r\n\r\nexport default Viewer;\r\n","import React from \"react\";\r\nimport \"./folder-container.styles.scss\";\r\n\r\nexport const FolderContainer = ({ height, width }) => (\r\n  <div\r\n    className=\"folder-container\"\r\n    style={{ height: `${height}px`, width: `${width}px` }}\r\n  >\r\n    <div className=\"folder\">Folder</div>\r\n    <div className=\"folder-item\">file</div>\r\n    <div className=\"folder-item\">file</div>\r\n    <div className=\"folder\">Folder</div>\r\n    <div className=\"folder-item\">file</div>\r\n    <div className=\"folder-item\">file</div>\r\n    <div className=\"folder\">Folder</div>\r\n    <div className=\"folder-item\">file</div>\r\n  </div>\r\n);\r\n","import { dropdownMenuChange } from \"./dropdown-menu.types\";\r\n\r\nexport const changeDropdowns = dropdown => ({\r\n  type: dropdownMenuChange.CHANGE_DROPDOWNS,\r\n  payload: dropdown\r\n});\r\n","import React from \"react\";\r\nimport Editor from \"../editor/editor.component\";\r\nimport Viewer from \"../viewer/viewer.component\";\r\nimport { FolderContainer } from \"../folder-container/folder-container.component\";\r\nimport { connect } from \"react-redux\";\r\nimport { changeDropdowns } from \"../../redux/dropdown-menu/dropdown-menu.actions\";\r\nimport { dropdownMenuDropped } from \"../../redux/dropdown-menu/dropdown-menu.types\";\r\nimport \"./editor-viewer-container.styles.scss\";\r\n\r\nconst EditorViewerContainer = ({\r\n  width,\r\n  height,\r\n  dropdownMenuClicked,\r\n  closeDropdownsOnClick,\r\n  editorViewerToggle,\r\n  foldersToggle\r\n}) => {\r\n  let dynamicWidth = foldersToggle ? width - 200 : width;\r\n\r\n  return (\r\n    <div\r\n      className=\"editor-viewer-container\"\r\n      style={{ height: `${height - 73}` }}\r\n      onClick={() => {\r\n        if (dropdownMenuClicked !== dropdownMenuDropped.DROPDOWNS_CLOSED) {\r\n          closeDropdownsOnClick();\r\n        }\r\n      }}\r\n    >\r\n      {foldersToggle ? (\r\n        <FolderContainer width={200} height={height - 74} />\r\n      ) : null}\r\n      {editorViewerToggle === \"both\" ? (\r\n        <Editor width={dynamicWidth / 2} height={height - 73} />\r\n      ) : editorViewerToggle === \"viewer\" ? (\r\n        <Editor width={dynamicWidth} height={height - 73} />\r\n      ) : null}\r\n      {editorViewerToggle === \"both\" ? (\r\n        <Viewer width={dynamicWidth / 2} height={height - 76} />\r\n      ) : editorViewerToggle === \"editor\" ? (\r\n        <Viewer width={dynamicWidth} height={height - 76} />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  width: state.screen.windowWidth,\r\n  height: state.screen.windowHeight,\r\n  editorViewerToggle: state.screen.editorViewerToggle,\r\n  dropdownMenuClicked: state.dropdownMenu.dropdownMenuClicked,\r\n  foldersToggle: state.screen.foldersToggle\r\n});\r\nconst mapDipsatchToProps = dispatch => ({\r\n  closeDropdownsOnClick: () =>\r\n    dispatch(changeDropdowns(dropdownMenuDropped.DROPDOWNS_CLOSED))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDipsatchToProps\r\n)(EditorViewerContainer);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  changeLangauge,\r\n  changeTheme,\r\n  changeFont,\r\n  toggleLigatures\r\n} from \"../../redux/editor-options/editor-options.actions\";\r\nimport \"./editor-options-menu.styles.scss\";\r\n\r\nconst EditorOptionsMenu = ({\r\n  changeLangauge,\r\n  changeFont,\r\n  changeTheme,\r\n  toggleLigatures\r\n}) => {\r\n  const initialOptions = {\r\n    Language: () => {\r\n      setOptionItems(langaugeOptions);\r\n    },\r\n    Theme: () => {\r\n      setOptionItems(themeOptions);\r\n    },\r\n    Font: () => {\r\n      setOptionItems(fontOptions);\r\n    },\r\n    \"Toggle Ligatures\": () => {\r\n      toggleLigatures();\r\n    }\r\n  };\r\n  const langaugeOptions = {\r\n    Latex: () => changeLangauge(\"latex\"),\r\n    JavaScript: () => changeLangauge(\"javascript\"),\r\n    Python: () => changeLangauge(\"python\")\r\n  };\r\n  const themeOptions = {\r\n    vs: () => changeTheme(\"vs\"),\r\n    \"vs-dark\": () => changeTheme(\"vs-dark\"),\r\n    \"hc-black\": () => changeTheme(\"hc-black\")\r\n  };\r\n  const fontOptions = {\r\n    \"Fira Code\": () => changeFont(\"Fira Code\"),\r\n    \"Ubuntu Mono\": () => changeFont(\"Ubuntu Mono\"),\r\n    VT323: () => changeFont(\"VT323\"),\r\n    \"Nova Mono\": () => changeFont(\"Nova Mono\")\r\n  };\r\n\r\n  const [optionItems, setOptionItems] = useState(initialOptions);\r\n\r\n  return (\r\n    <div className=\"editor-options-menu\">\r\n      <div className=\"editor-options-items\">\r\n        {Object.keys(optionItems).map(item => (\r\n          <div\r\n            key={item}\r\n            className=\"editor-option-item\"\r\n            onClick={optionItems[item]}\r\n          >\r\n            {item}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeLangauge: langauge => dispatch(changeLangauge(langauge)),\r\n  changeFont: font => dispatch(changeFont(font)),\r\n  changeTheme: theme => dispatch(changeTheme(theme)),\r\n  toggleLigatures: () => dispatch(toggleLigatures())\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(EditorOptionsMenu);\r\n","import { editorOptionsActionTypes } from \"./editor-options.types\";\r\n\r\nexport const changeLangauge = language => ({\r\n  type: editorOptionsActionTypes.CHANGE_LANGUAGE,\r\n  payload: language\r\n});\r\n\r\nexport const changeTheme = theme => ({\r\n  type: editorOptionsActionTypes.CHANGE_THEME,\r\n  payload: theme\r\n});\r\n\r\nexport const changeFont = font => ({\r\n  type: editorOptionsActionTypes.CHANGE_FONT,\r\n  payload: font\r\n});\r\n\r\nexport const toggleLigatures = () => ({\r\n  type: editorOptionsActionTypes.TOGGLE_LIGATURES\r\n});\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { toggleFolders } from \"../../redux/screen/screen.actions\";\r\nimport \"./files-menu.styles.scss\";\r\n\r\nconst FilesMenu = ({ toggleFolders }) => {\r\n  const initialOptions = {\r\n    Save: () => {},\r\n    Folders: toggleFolders,\r\n    Profile: () => {},\r\n    \"Other Options\": () => {}\r\n  };\r\n\r\n  return (\r\n    <div className=\"files-menu\">\r\n      <div className=\"files-items\">\r\n        {Object.keys(initialOptions).map(item => (\r\n          <div key={item} className=\"files-item\" onClick={initialOptions[item]}>\r\n            {item}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleFolders: () => dispatch(toggleFolders())\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(FilesMenu);\r\n","import { screenActionTypes } from \"./screen.types\";\r\n\r\nexport const handleResize = () => ({\r\n  type: screenActionTypes.HANDLE_RESIZE\r\n});\r\n\r\nexport const toggleEditorViewer = component => ({\r\n  type: screenActionTypes.TOGGLE_EDITOR_VIEWER,\r\n  payload: component\r\n});\r\n\r\nexport const toggleFolders = () => ({\r\n  type: screenActionTypes.TOGGLE_FOLDERS\r\n});\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport EditorOptionsMenu from \"../editor-options-menu/editor-options-menu.component\";\r\nimport FilesMenu from \"../files-menu/files-menu.component\";\r\nimport { changeDropdowns } from \"../../redux/dropdown-menu/dropdown-menu.actions\";\r\nimport { dropdownMenuDropped } from \"../../redux/dropdown-menu/dropdown-menu.types\";\r\nimport { toggleEditorViewer } from \"../../redux/screen/screen.actions\";\r\n\r\nimport \"./header.styles.scss\";\r\n\r\nconst Header = ({\r\n  dropdownMenuClicked,\r\n  changeDropdowns,\r\n  toggleEditorViewer\r\n}) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"title\">Latex Editor</div>\r\n      <div className=\"dropper-container\">\r\n        <div\r\n          className=\"dropper\"\r\n          onClick={() => changeDropdowns(dropdownMenuDropped.FILES_OPEN)}\r\n          onMouseOver={() => {\r\n            if (\r\n              dropdownMenuClicked === dropdownMenuDropped.EDITOR_OPTIONS_OPEN\r\n            ) {\r\n              changeDropdowns(dropdownMenuDropped.FILES_OPEN);\r\n            }\r\n          }}\r\n        >\r\n          Files\r\n        </div>\r\n        {dropdownMenuClicked === dropdownMenuDropped.FILES_OPEN ? (\r\n          <FilesMenu />\r\n        ) : null}\r\n        <div\r\n          className=\"dropper\"\r\n          onClick={() =>\r\n            changeDropdowns(dropdownMenuDropped.EDITOR_OPTIONS_OPEN)\r\n          }\r\n          onMouseOver={() => {\r\n            if (dropdownMenuClicked === dropdownMenuDropped.FILES_OPEN) {\r\n              changeDropdowns(dropdownMenuDropped.EDITOR_OPTIONS_OPEN);\r\n            }\r\n          }}\r\n        >\r\n          Editor Options\r\n        </div>\r\n        {dropdownMenuClicked === dropdownMenuDropped.EDITOR_OPTIONS_OPEN ? (\r\n          <EditorOptionsMenu />\r\n        ) : null}\r\n        <div\r\n          className=\"dropper\"\r\n          onClick={() => toggleEditorViewer(\"editor\")}\r\n          onMouseOver={() => {\r\n            if (\r\n              dropdownMenuClicked === dropdownMenuDropped.EDITOR_OPTIONS_OPEN ||\r\n              dropdownMenuClicked === dropdownMenuDropped.FILES_OPEN\r\n            ) {\r\n              changeDropdowns(dropdownMenuDropped.DROPDOWNS_CLOSED);\r\n            }\r\n          }}\r\n        >\r\n          Toggle Editor\r\n        </div>\r\n        <div\r\n          className=\"dropper\"\r\n          onClick={() => toggleEditorViewer(\"viewer\")}\r\n          onMouseOver={() => {\r\n            if (\r\n              dropdownMenuClicked === dropdownMenuDropped.EDITOR_OPTIONS_OPEN ||\r\n              dropdownMenuClicked === dropdownMenuDropped.FILES_OPEN\r\n            ) {\r\n              changeDropdowns(dropdownMenuDropped.DROPDOWNS_CLOSED);\r\n            }\r\n          }}\r\n        >\r\n          Toggle Viewer\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  dropdownMenuClicked: state.dropdownMenu.dropdownMenuClicked\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeDropdowns: dropdown => dispatch(changeDropdowns(dropdown)),\r\n  toggleEditorViewer: component => dispatch(toggleEditorViewer(component))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Header);\r\n","import React, { useEffect } from \"react\";\nimport EditorViewerContainer from \"./components/editor-viewer-container/editor-viewer-container.component\";\nimport Header from \"./components/header/header.component\";\nimport { connect } from \"react-redux\";\nimport { handleResize } from \"./redux/screen/screen.actions\";\n\nimport \"./App.scss\";\n\nconst App = ({ handleResize }) => {\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <EditorViewerContainer />\n    </div>\n  );\n};\n\nconst mapDipsatchToProps = dispatch => ({\n  handleResize: () => dispatch(handleResize())\n});\n\nexport default connect(\n  null,\n  mapDipsatchToProps\n)(App);\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport App from \"./App\";\n\n/**\n * Creating a Web app to write and view Latex files.\n * TODO: Create folder structure on Front-End, should be toggled with Ctrl-b\n * TODO: Create User-Profile for Front-End\n * TODO: Add a small div sliver between the editor and viewer so that you can cahnge the sizing\n * ! Create Back end on heroku that will compile pdf and send back to Front-End\n */\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}